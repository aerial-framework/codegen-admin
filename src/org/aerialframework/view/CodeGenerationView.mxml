<?xml version="1.0"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="org.aerialframework.components.*"
          width="100%" initialize="initializeHandler(event)">

    <mx:HDividedBox width="100%" height="100%">
        <mx:VDividedBox width="100%" height="100%">
            <s:Panel width="100%" height="100%" minHeight="200" dropShadowVisible="false" title="Existing PHP Models">
                <s:layout>
                    <s:VerticalLayout paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8"/>
                </s:layout>

                <s:List id="modelsList" width="100%" height="100%" allowMultipleSelection="true" minWidth="300"
                        borderColor="#D9D9D9" useVirtualLayout="false" change="modelSelectionHandler(event)"
                        itemRenderer="org.aerialframework.renderer.QuickDiffListItemRenderer" labelField="name">
                </s:List>
            </s:Panel>

            <s:Panel width="100%" height="100%" minHeight="200" dropShadowVisible="false" title="Information">
                <s:layout>
                    <s:VerticalLayout paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8"/>
                </s:layout>

                <components:ModelDefinitionView id="modelDefinitionsView" width="100%" height="100%"/>
            </s:Panel>
        </mx:VDividedBox>

        <!--<s:Panel id="generationPanel" width="100%" dropShadowVisible="false" title="Code Generation">
            <s:layout>
                <s:VerticalLayout gap="4" paddingBottom="8" paddingLeft="8" paddingRight="8"
                                  paddingTop="8"/>
            </s:layout>

            <s:HGroup width="100%" gap="15">
                <s:Image source="@Embed('../../../assets/icons/application-x-php.png')"/>
                <s:CheckBox id="phpModelsCheck" width="90" label="PHP Models"/>
                <s:CheckBox id="phpServicesCheck" label="PHP Services"/>
            </s:HGroup>

            <s:HGroup width="100%" verticalAlign="middle" gap="0">
                <s:Line width="100%">
                    <s:stroke>
                        <s:SolidColorStroke color="#BBBBBB" alpha="0.3"/>
                    </s:stroke>
                </s:Line>
            </s:HGroup>

            <s:HGroup width="100%" gap="15">
                <s:Image source="@Embed('../../../assets/icons/flash.png')"/>
                <s:CheckBox id="as3ModelsCheck" width="90" label="AS3 Models"/>
                <s:CheckBox id="as3ServicesCheck" label="AS3 Services"/>
            </s:HGroup>

            <s:HGroup width="100%" verticalAlign="middle" gap="0">
                <s:Line width="100%">
                    <s:stroke>
                        <s:SolidColorStroke color="#BBBBBB" alpha="0.3"/>
                    </s:stroke>
                </s:Line>
            </s:HGroup>

            <s:HGroup width="100%" gap="15">
                <s:Image source="@Embed('../../../assets/icons/flash.png')"/>
                <s:CheckBox id="bootstrapCheck" width="90" label="Bootstrap"/>
            </s:HGroup>

            <s:Spacer height="100%"/>

            <mx:Button id="generateBtn" width="100%" label="Generate" chromeColor="#0E65A8"
                       fontWeight="bold" icon="@Embed('../../../assets/icons/visualization.png')"
                       paddingBottom="6" paddingLeft="12" paddingRight="12" paddingTop="6"
                       click="generate()"/>
            <mx:Button width="100%" label="Regenerate database tables"
                       chromeColor="#44A80E" fontWeight="bold"
                       icon="@Embed('../../../assets/icons/revert.png')" paddingBottom="6"
                       paddingLeft="12" paddingRight="12" paddingTop="6"/>
        </s:Panel>-->

        <mx:VDividedBox height="100%" minWidth="250">
            <s:Panel title="Code Generation" width="100%" height="100%" dropShadowVisible="false"
                     chromeColor="0x0e7ed1">

                <s:layout>
                    <s:VerticalLayout paddingBottom="10" paddingLeft="10"
                                      paddingRight="10" paddingTop="10"/>
                </s:layout>

                <s:List id="pluginsList" width="100%" borderVisible="false"
                        itemRenderer="org.aerialframework.renderer.PluginGroupItemRenderer">
                    <s:layout>
                        <s:VerticalLayout gap="10"/>
                    </s:layout>
                </s:List>
                
                <s:Spacer height="100%"/>
                
                <s:Button width="100%" label="Generate!" click="findSelectedPlugins()" height="50"/>

            </s:Panel>

            <!--<s:Panel id="optionsPanel" width="100%" dropShadowVisible="false" title="Code Generation Options">
                <s:layout>
                    <s:VerticalLayout paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8"/>
                </s:layout>

                <s:HGroup width="100%">
                    <mx:Form width="100%" height="100%">
                        <mx:FormItem width="100%" label="ActionScript Source Path">
                            <s:HGroup width="100%" verticalAlign="middle">
                                <s:TextInput id="as3SourcePathTxt" width="100%"/>
                                <s:Button label="Browse"/>
                            </s:HGroup>
                        </mx:FormItem>

                        <mx:FormItem width="100%" label="PHP Source Path">
                            <s:HGroup width="100%" verticalAlign="middle">
                                <s:TextInput id="phpSourcePathTxt" width="100%"/>
                                <s:Button label="Browse"/>
                            </s:HGroup>
                        </mx:FormItem>
                    </mx:Form>

                    <mx:Form width="100%" height="100%">
                        <mx:FormItem width="100%" label="Package">
                            <s:TextInput id="packageTxt" width="100%" restrict="[a-zA-Z0-9\.\_]"/>
                        </mx:FormItem>

                        <mx:FormItem width="100%" label="Models Suffix">
                            <s:TextInput id="voSuffixTxt" width="100%"/>
                        </mx:FormItem>

                        <mx:FormItem width="100%" label="Services Suffix">
                            <s:TextInput id="serviceSuffixTxt" width="100%"/>
                        </mx:FormItem>
                    </mx:Form>
                </s:HGroup>

                <s:Spacer height="100%"/>

                <mx:Button width="100%" label="Save Options" chromeColor="#0E65A8"
                           fontWeight="bold" icon="@Embed('../../../assets/icons/visualization.png')"
                           paddingBottom="6" paddingLeft="12" paddingRight="12" paddingTop="6"/>
            </s:Panel>-->
        </mx:VDividedBox>
    </mx:HDividedBox>

    <fx:Script>
        <![CDATA[
        import com.codeazur.utils.StringUtils;
        import com.mysql.workbench.model.Column;
        import com.mysql.workbench.model.Schema;
        import com.mysql.workbench.model.Table;

        import mx.collections.ArrayList;
        import mx.events.FlexEvent;
        import mx.utils.OrderedObject;

        import org.aerialframework.abstract.AbstractPlugin;
        import org.aerialframework.abstract.GeneratedFile;
        import org.aerialframework.controller.FileIOController;

        import org.aerialframework.controller.PluginController;

        import org.aerialframework.controller.ProjectController;

        import org.aerialframework.model.FieldDefinition;

        import org.aerialframework.model.ModelDefinition;
        import org.aerialframework.renderer.PluginGroupItemRenderer;
        import org.aerialframework.renderer.PluginItemRenderer;
        import org.aerialframework.renderer.QuickDiffListItemRenderer;

        import spark.components.DataGroup;

        import spark.events.IndexChangeEvent;

        private var _schema:Schema;

        private function initializeHandler(event:FlexEvent):void
        {
            PluginController.instance.pluginsLoaded.add(pluginsLoadHandler);
        }

        private function pluginsLoadHandler(plugins:Array):void
        {
            if(!plugins)
            {
                pluginsList.dataProvider = new ArrayList();
                return;
            }

            var groupList:ArrayList = new ArrayList();
            var groups:OrderedObject = new OrderedObject();
            
            for each(var plugin:Object in plugins)
            {
                if(!groups.hasOwnProperty(plugin.instance.language))
                    groups[plugin.instance.language] = [];

                groups[plugin.instance.language].push(plugin);
                
            }
            
            for(var group:String in groups)
            {
                groupList.addItem({type:group, group:groups[group]});
            }

            pluginsList.dataProvider = groupList;
        }

        private function modelSelectionHandler(event:IndexChangeEvent):void
        {
            if(!modelsList.selectedItem && modelsList.selectedItems.length == 0)
            {
                modelDefinitionsView.definitions = new ArrayList();
                return;
            }

            if(modelsList.selectedItems.length > 1)
            {
                modelDefinitionsView.displayMode = ModelDefinitionView.MULTIPLE;

                // modelsList.selectedItems is a Vector, and ArrayList needs an Array
                var selectedModels:Array = vectorToArray(modelsList.selectedItems);

                modelDefinitionsView.definitions = new ArrayList(selectedModels);
            }
            else
            {
                modelDefinitionsView.displayMode = ModelDefinitionView.SINGLE;

                modelDefinitionsView.definitions = new ArrayList(modelsList.selectedItem.fields);
            }
        }

        /**
         * Thanks Jack!
         * @see http://jacksondunstan.com/articles/192
         */
        private function vectorToArray(v:Object):Array
        {
            var len:int = v.length;
            var ret:Array = new Array(len);
            for(var i:int = 0; i < len; ++i)
            {
                ret[i] = v[i];
            }
            return ret;
        }

        private function generate():void
        {
            var tables:Array = [];
            for each(var modelDef:ModelDefinition in this.modelsList.selectedItems)
                tables.push(modelDef.tableName);

//            ProjectController.instance.generate("php-doctrine", this.schema, tables);
        }

        public function set schema(schema:Schema):void
        {
            _schema = schema;

            processSchema();
        }

        public function get schema():Schema
        {
            return _schema;
        }

        private function processSchema():void
        {
            var models:Array = [];
            for each(var table:Table in schema.tables)
            {
                var model:ModelDefinition = new ModelDefinition();
                model.fields = [];
                model.tableName = table.name;
                model.modelName = table.className;

                for each(var column:Column in table.columns)
                {
                    var field:FieldDefinition = new FieldDefinition();
                    field.name = column.name;
                    field.type = getAS3Type(column.rawType);

                    model.fields.push(field);
                }

                models.push(model);
            }

            models = models.sortOn("modelName");

            this.modelsList.dataProvider = new ArrayList(models);
        }

        private function findSelectedPlugins():void
        {
            var dg:DataGroup = pluginsList.dataGroup;

            for(var i:int = 0; i < dg.numElements; i++)
            {
                var group:PluginGroupItemRenderer = dg.getElementAt(i) as PluginGroupItemRenderer;
                
                for each(var element:PluginItemRenderer in group.pluginRenderers)
                {
                    if(!element.selected)
                        continue;

                    generateCode(element);
                }
            }
        }

        private function generateCode(element:PluginItemRenderer):void
        {
            if(!element.data || !element.data.hasOwnProperty("instance"))
                return;
            
            var plugin:AbstractPlugin = element.data.instance as AbstractPlugin;
            if(!plugin)
                return;

            var tablesList:Array = [];
            for each(var modelDef:ModelDefinition in this.modelsList.selectedItems)
                tablesList.push(modelDef.tableName);

            if(tablesList.length == 0)
                tablesList = null;
            
            var options:Object = {"tables":tablesList};
            plugin.options = options;
            plugin.initialize();
            
            var generatedFiles:Array = plugin.generate();
            if(!generatedFiles)
                return;
            
            for each(var generated:GeneratedFile in generatedFiles)
            {
                var type:String = "";
                switch(plugin.language)
                {
                    case "ActionScript 3.0":
                        type = "src_flex";
                        break;
                    case "PHP":
                        type = "src_php";
                        break;
                }
                
                var directory:String = generated.packageString.replace(/\./g, File.separator) + File.separator + generated.fileName;
                var file:File = File.desktopDirectory.resolvePath("aerial-codegen" + File.separator + type + File.separator + directory);

                FileIOController.write(file, generated.content, true);
                
//                trace(StringUtils.repeat(50, "-"));
//                trace("Filename: " + generated.fileName);
//                trace("Package: " + generated.packageString);
//                trace("Type: " + generated.type);
//                trace("Content: " + generated.content);
            }
        }

        private function getAS3Type(type:String, unsigned:Boolean = false):String
        {
            var as3type:String = "";
            switch(type)
            {
                case 'integer':
                    as3type = unsigned ? "uint" : "int";
                    break;
                case 'decimal':
                case 'float':
                case 'double':
                    as3type = "Number";
                    break;
                case 'set':
                case 'array':
                    as3type = "Array";
                    break;
                case 'boolean':
                    as3type = "Boolean";
                    break;
                case 'blob':
                    as3type = "ByteArray";
                    break;
                case 'object':
                    as3type = "Object";
                    break;
                case 'time':
                case 'timestamp':
                case 'date':
                case 'datetime':
                    as3type = "Date";
                    break;
                case 'enum':
                case 'gzip':
                case 'string':
                case 'clob':
                    as3type = "String";
                    break;
                default:
                    as3type = type;
                    break;
            }

            return as3type;
        }
        ]]>
    </fx:Script>

</s:HGroup>
