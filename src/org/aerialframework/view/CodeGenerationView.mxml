<?xml version="1.0"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="org.aerialframework.components.*"
          width="100%" initialize="initializeHandler(event)">


    <mx:VDividedBox width="100%" height="100%">
        <mx:HDividedBox width="100%" height="100%">
            <s:Panel width="100%" height="100%" minHeight="200" dropShadowVisible="false" title="Existing PHP Models">
                <s:layout>
                    <s:VerticalLayout paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8"/>
                </s:layout>

                <s:List id="modelsList" width="100%" height="100%" allowMultipleSelection="true" minWidth="300"
                        borderColor="#D9D9D9" useVirtualLayout="false" change="modelSelectionHandler(event)"
                        itemRenderer="org.aerialframework.renderer.QuickDiffListItemRenderer" labelField="name">
                </s:List>
            </s:Panel>

            <s:Panel minWidth="350" height="100%" minHeight="200" dropShadowVisible="false" title="Information">
                <s:layout>
                    <s:VerticalLayout paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8"/>
                </s:layout>

                <components:ModelDefinitionView id="modelDefinitionsView" width="100%" height="100%"/>
            </s:Panel>
        </mx:HDividedBox>


        <s:Panel title="Code Generation" width="100%" dropShadowVisible="false" minHeight="250">

            <s:layout>
                <s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"/>
            </s:layout>

            <s:Scroller width="100%" height="100%">
                <s:VGroup width="100%">
                    <s:List id="pluginsList" width="100%" borderVisible="false"
                            itemRenderer="org.aerialframework.renderer.PluginGroupItemRenderer">
                        <s:layout>
                            <s:VerticalLayout gap="10"/>
                        </s:layout>
                    </s:List>

                    <s:Spacer height="100%"/>
                </s:VGroup>
            </s:Scroller>

            <s:Button width="100%" label="Generate!" click="generate()" height="30"
                      chromeColor="#0e7ed1"/>

        </s:Panel>
    </mx:VDividedBox>

    <fx:Script>
        <![CDATA[
        import com.mysql.workbench.Inflector;
        import com.mysql.workbench.model.Column;
        import com.mysql.workbench.model.DomesticKey;
        import com.mysql.workbench.model.ForeignKey;
        import com.mysql.workbench.model.Schema;
        import com.mysql.workbench.model.Table;

        import mx.collections.ArrayList;
        import mx.controls.Alert;
        import mx.core.UIComponent;
        import mx.events.FlexEvent;
        import mx.utils.ObjectUtil;
        import mx.utils.OrderedObject;

        import org.aerialframework.abstract.AbstractPlugin;
        import org.aerialframework.abstract.GeneratedFile;
        import org.aerialframework.abstract.OptionDescriptor;
        import org.aerialframework.controller.FileIOController;
        import org.aerialframework.controller.PluginController;
        import org.aerialframework.model.FieldDefinition;
        import org.aerialframework.model.ModelDefinition;
        import org.aerialframework.renderer.PluginGroupItemRenderer;
        import org.aerialframework.renderer.PluginItemRenderer;

        import spark.components.DataGroup;
        import spark.events.IndexChangeEvent;

        private var _schema:Schema;
        
        private var destinationDir:File;

        private function initializeHandler(event:FlexEvent):void
        {
            PluginController.instance.pluginsLoaded.add(pluginsLoadHandler);
        }

        private function pluginsLoadHandler(plugins:Array):void
        {
            if(!plugins)
            {
                pluginsList.dataProvider = new ArrayList();
                return;
            }

            var groupList:ArrayList = new ArrayList();
            var groups:OrderedObject = new OrderedObject();

            for each(var plugin:Object in plugins)
            {
                if(!groups.hasOwnProperty(plugin.instance.language))
                    groups[plugin.instance.language] = [];

                groups[plugin.instance.language].push(plugin);

            }

            for(var group:String in groups)
            {
                groupList.addItem({type:group, group:groups[group]});
            }

            pluginsList.dataProvider = groupList;
        }

        private function modelSelectionHandler(event:IndexChangeEvent):void
        {
            if(!modelsList.selectedItem && modelsList.selectedItems.length == 0)
            {
                modelDefinitionsView.definitions = new ArrayList();
                return;
            }

            if(modelsList.selectedItems.length > 1)
            {
                modelDefinitionsView.displayMode = ModelDefinitionView.MULTIPLE;

                // modelsList.selectedItems is a Vector, and ArrayList needs an Array
                var selectedModels:Array = vectorToArray(modelsList.selectedItems);

                modelDefinitionsView.definitions = new ArrayList(selectedModels);
            }
            else
            {
                modelDefinitionsView.displayMode = ModelDefinitionView.SINGLE;

                modelDefinitionsView.definitions = new ArrayList(modelsList.selectedItem.fields);
            }
        }

        /**
         * Thanks Jack!
         * @see http://jacksondunstan.com/articles/192
         */
        private function vectorToArray(v:Object):Array
        {
            var len:int = v.length;
            var ret:Array = new Array(len);
            for(var i:int = 0; i < len; ++i)
            {
                ret[i] = v[i];
            }
            return ret;
        }

        public function set schema(schema:Schema):void
        {
            _schema = schema;

            processSchema();
        }

        public function get schema():Schema
        {
            return _schema;
        }

        private function processSchema():void
        {
            var models:Array = [];
            for each(var table:Table in schema.tables)
            {
                var model:ModelDefinition = new ModelDefinition();
                model.fields = [];
                model.tableName = table.name;
                model.modelName = table.className;

                for each(var column:Column in table.columns)
                {
                    var field:FieldDefinition = new FieldDefinition();
                    field.name = column.name;
                    field.type = column.rawType;

                    model.fields.push(field);
                }

                for each(var fk:ForeignKey in table.foreignKeys)
                {
                    var oneRelation:FieldDefinition = new FieldDefinition();
                    oneRelation.name = fk.columnClassName;
                    oneRelation.relationType = fk.columnClassName != fk.referencedTable.className
                            ? fk.referencedTable.className
                            : fk.columnClassName;

                    model.fields.push(oneRelation);
                }

                var alias:String;
                var aliases:Array = new Array();
                for each(var dk:DomesticKey in table.domesticKeys)
                {
                    //There's a possibility of repeating aliases in cases like self referencing using a refClass.
                    alias = Inflector.pluralCamelize(dk.referencedTable.className);
                    if(!aliases["_" + alias])
                        aliases["_" + alias] = 1;
                    else
                        aliases["_" + alias]++;

                    var manyRelation:FieldDefinition = new FieldDefinition();
                    manyRelation.name = alias + (aliases["_" + alias] > 1 ? aliases["_" + alias] : "");
                    manyRelation.relationType = dk.referencedTable.className;

                    model.fields.push(manyRelation);
                }

                models.push(model);
            }

            models = models.sortOn("modelName");

            this.modelsList.dataProvider = new ArrayList(models);
        }

        private function generate():void
        {
            if(!destinationDir)
            {
                destinationDir = new File();
                destinationDir.addEventListener(Event.SELECT, findSelectedPlugins);
                destinationDir.browseForDirectory("Select a destination directory");
            }
            else
                findSelectedPlugins();
        }

        private function findSelectedPlugins(event:Event=null):void
        {
            if(!destinationDir)
            {
                generate();
                return;
            }

            var startTime:int = getTimer();

            var dg:DataGroup = pluginsList.dataGroup;
            var fileCount:int = 0;

            for(var i:int = 0; i < dg.numElements; i++)
            {
                var group:PluginGroupItemRenderer = dg.getElementAt(i) as PluginGroupItemRenderer;

                for each(var element:PluginItemRenderer in group.pluginRenderers)
                {
                    if(!element.selected)
                        continue;

                    if(element.optionFields)
                    {
                        var options:Object = {};
                        for(var optionField:Object in element.optionFields)
                        {
                            if(!optionField || !optionField is OptionDescriptor)
                                continue;

                            var optionDescriptor:OptionDescriptor = optionField as OptionDescriptor;
                            var field:UIComponent = element.optionFields[optionDescriptor];

                            if(optionDescriptor.propertyCallback)
                            {
                                options[optionDescriptor.fieldName] = optionDescriptor.propertyCallback.apply(this, [field]);
                            }
                            else
                            {
                                options[optionDescriptor.fieldName] = field[optionDescriptor.property];
                            }
                        }
                    }

                    var plugin:AbstractPlugin = element.data.instance as AbstractPlugin;
                    if(!plugin)
                        continue;

                    plugin.options = options;

                    fileCount += generateCode(element);
                }
            }

            Alert.show("Generated " + fileCount + " files in " + (getTimer() - startTime) + "ms", "Code Generation complete!");
        }

        private function generateCode(element:PluginItemRenderer):int
        {
            if(!element.data || !element.data.hasOwnProperty("instance"))
                return 0;

            var plugin:AbstractPlugin = element.data.instance as AbstractPlugin;
            if(!plugin)
                return 0;

            var tablesList:Array = [];
            for each(var modelDef:ModelDefinition in this.modelsList.selectedItems)
                tablesList.push(modelDef.tableName);

            if(tablesList.length == 0)
                tablesList = null;

            if(!plugin.options)
                plugin.options = {};

            plugin.options.tables = tablesList;

            plugin.initialize();

            var generatedFiles:Array = plugin.generate();
            if(!generatedFiles)
                return 0;

            var generatedFileCount:int = 0;

            for each(var generated:GeneratedFile in generatedFiles)
            {
                var type:String = "";
                switch(plugin.language)
                {
                    case "ActionScript 3.0":
                        type = "src_flex" + File.separator;
                        break;
                    case "PHP":
                        type = "src_php" + File.separator;
                        break;
                    case "YAML":
                        type = "";
                        break;
                }

                var directory:String = generated.packageString.replace(/\./g, File.separator) + File.separator + generated.fileName;
                if(directory.charAt(0) == "/" || directory.charAt(0) == "\\")
                    directory = directory.substr(1);

                var file:File = destinationDir.resolvePath(type + directory);

                if(FileIOController.write(file, generated.content, true))
                    generatedFileCount++;
            }

            return generatedFileCount;
        }
        ]]>
    </fx:Script>

</s:VGroup>
